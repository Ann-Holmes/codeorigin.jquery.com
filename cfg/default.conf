#
# This file is responsible for the site which serves the main releases from codeorigin. By default,
# it generates a site that operates in "break glass" emergency mode. All requests are served,
# regardless of where they come from.
#
# In production, the CDN should add a private header to origin fetches. All requests which do not
# include the correct header should be bounced via 301 redirect back to the CDN. This ensures that
# even if a client attempts to link to codeorigin, it will still be served from the CDN. The end
# result should be that codeorigin is only reachable for origin pulls from the CDN, decreasing its
# load and reducing the attack surface for DDOSs.
#
# How to enable production mode:
#
# **VERY IMPORTANT**: You must first configure the CDN to send the header **BEFORE** you configure
# codeorigin to ignore requests that omit the header. If you do not preserve this order you will
# create a 301 redirect loop and **break a substantial portion of the internet.**
#
# 1. Add a header to origin pulls named "cdn-access". Set the value to something long and random. An
# md5 hash of some random letters is probably good enough.
#
# 2. Rebuild this container and set the environment variable CDN_ACCESS_KEY to the value in step 1.
#
# 3. Test the container:
#   * First, check that requests with the correct header will not be redirected. This should always
#     return the actual file contents of the 3.5.1 release.
#
#     * `curl -i -H 'cdn-access: {value from step 1}' https://CONTAINER_URL/jquery-3.5.1.js`
#
#   * Next, check that requests without the header are redirected to code.jquery.com. This should
#      always return "HTTP/1.1 301 Moved Permanently"
#
#     * `curl -i https://CONTAINER_URL/jquery-3.5.1.js`
#
# 4. Update the DNS to point the codeorigin CNAME to https://CONTAINER_URL
#
#
# How to enable "Break glass" mode:
#
# If everything has melted down and you need to go into "break glass" mode, deploy this container
# without a CDN_ACCESS_KEY environment variable. It will serve all requests without redirecting to
# the CDN, regardless of the presence or absence of the header.
#
# What this means in real terms is that requests to https://code.jquery.com will still go through
# the CDN, but requests to https://codeorigin.jquery.com will hit this container directly. This is a
# recipe for a DDOS (innocent or intentional), so this should be a last resort while other issues
# are worked out.
#

# Do not change the following line. The Dockerfile will add CDN header detection at build time if
# the correct environment variable is set.
##PLACEHOLDER-cdn_header_detection-DO_NOT_CHANGE##


#  CDN_ACCESS_KEY "0";
server {
  listen        80;
  listen        [::]:80;
  server_name   localhost;

  access_log  /var/log/nginx/host.access.log  main;

  location / {
    root        /usr/share/nginx/html;
    index       index.html index.htm;

    # Do not change the following line. The Dockerfile will add the reroute logic at build time if
    # the correct environment variable is set.
    ##PLACEHOLDER-cdn_reroute-DO_NOT_CHANGE##

  }

  #error_page    404              /404.html;

  # redirect server error pages to the static page /50x.html
  #
  error_page    500 502 503 504  /50x.html;
  location = /50x.html {
    root   /usr/share/nginx/html;
  }
}

# vim: ts=2 sw=2 et
